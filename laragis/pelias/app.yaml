---
# Source: pelias/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pelias
  namespace: "gtelmaps"
  labels:
    app.kubernetes.io/instance: pelias
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pelias
    app.kubernetes.io/version: 6.0.0
    helm.sh/chart: pelias-0.1.0
    app.kubernetes.io/part-of: pelias
data:
  pelias.json: |-
    {
      "logger": {
        "level": "info",
        "timestamp": false
      },
      "esclient": {
        "apiVersion": "7.x",
        "hosts": [{ "host": "pelias-elasticsearch-coordinating-only", "port": 9200 }]
      },
      "elasticsearch": {
        "settings": {
          "index": {
            "refresh_interval": "10s",
            "number_of_replicas": "0",
            "number_of_shards": "1"
          }
        }
      },
      "acceptance-tests": {
        "endpoints": {
          "docker": "http://pelias-api:4000/v1/"
        }
      },
      "api": {
        "services": {
          "placeholder": { "url": "http://pelias-placeholder:8080" },
          "pip": { "url": "http://pelias-pip:8080" },
          "interpolation": { "url": "http://pelias-interpolation:8080" },
          "libpostal": { "url": "http://pelias-libpostal:8080" }
        },
        "targets": {
          "auto_discover": true,
          "layers_by_source": {
            "gm": ["address"]
          }
        }
      },
      "imports": {
        "adminLookup": {
          "enabled": false
        },
        "blacklist": {
          "files": ["/data/blacklist/osm.txt"]
        },
        "csv": {
          "datapath": "/data/csv",
          "files": [],
          "download": [
            "https://raw.githubusercontent.com/gtelots/csv-importer/master/data/example.csv"
          ]
        },
        "geonames": {
          "datapath": "/data/geonames",
          "countryCode": "VN"
        },
        "openstreetmap": {
          "download": [
            {
              "sourceURL": "http://download.geofabrik.de/asia/vietnam-latest.osm.pbf"
            }
          ],
          "leveldbpath": "/tmp",
          "datapath": "/data/openstreetmap",
          "import": [
            {
              "filename": "vietnam-latest.osm.pbf"
            }
          ]
        },
        "openaddresses": {
          "datapath": "/data/openaddresses",
          "files": ["vi/statewide.csv"]
        },
        "polyline": {
          "datapath": "/data/polylines",
          "files": ["extract.0sv"]
        },
        "whosonfirst": {
          "datapath": "/data/whosonfirst",
          "importPostalcodes": true,
          "countryCode": "VN",
          "importPlace": ["85632763"]
        }
      }
    }
---
# Source: pelias/templates/init-job/create-es-index-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: pelias-create-es-index
  namespace: "gtelmaps"
  labels:
    app.kubernetes.io/instance: pelias
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pelias
    app.kubernetes.io/version: 6.0.0
    helm.sh/chart: pelias-0.1.0
    app.kubernetes.io/part-of: pelias
    app.kubernetes.io/component: elasticsearch
  annotations:
    {}
spec:
  backoffLimit: 10 
  ttlSecondsAfterFinished: 120 
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: pelias
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: pelias
        app.kubernetes.io/version: 6.0.0
        helm.sh/chart: pelias-0.1.0
        app.kubernetes.io/component: elasticsearch
    spec:
      
      restartPolicy: OnFailure
      initContainers:
        - name: wait-elasticsearch
          image: jwilder/dockerize:0.6.1
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - -ec
            - dockerize -wait http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT} -timeout=120s
          env:
            - name: ELASTICSEARCH_HOST
              value: "pelias-elasticsearch-coordinating-only"
            - name: ELASTICSEARCH_PORT
              value: "9200"
      containers:
        - name: create-index
          image: pelias/schema:master
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              set -o errexit
              set -o nounset
              set -o pipefail

              if [ ! -r "/data/tmp/pelias_index.lock" ]; then
                echo "Create elasticsearch index with pelias mapping"
                ./bin/create_index
                install -D /dev/null /data/tmp/pelias_index.lock
              fi
              
              echo "Done!"
          volumeMounts:
            - name: configuration
              mountPath: /code/pelias.json
              subPath: pelias.json
            - name: data
              mountPath: /data
      volumes:
        - name: configuration
          configMap:
            name: pelias
        - name: data
          persistentVolumeClaim:
            claimName: pelias-data
