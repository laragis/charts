{{- /*
Copyright Broadcom, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/}}

{{- if and .Values.initJob.elasticCreateIndex.enabled .Values.externalElasticsearch.host }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ printf "%s-create-es-index" (include "common.names.fullname" .) | trunc 63 | trimSuffix "-" }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/part-of: pelias
    app.kubernetes.io/component: elasticsearch
  {{- $annotations := include "common.tplvalues.merge" ( dict "values" ( list .Values.initJob.annotations .Values.commonAnnotations ) "context" . ) }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $annotations "context" $) | nindent 4 }}
spec:
  backoffLimit: {{ .Values.initJob.backoffLimit }}
  {{- if .Values.initJob.cleanupAfterFinished.enabled }} 
  ttlSecondsAfterFinished: {{ .Values.initJob.cleanupAfterFinished.seconds }} 
  {{- end }} 
  template:
    metadata:
      {{- $podLabels := include "common.tplvalues.merge" ( dict "values" ( list .Values.initJob.podLabels .Values.commonLabels ) "context" . ) }}
      labels: {{- include "common.labels.standard" ( dict "customLabels" $podLabels "context" $ ) | nindent 8 }}
        app.kubernetes.io/component: elasticsearch
      {{- if .Values.initJob.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.initJob.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      {{- include "pelias.imagePullSecrets" . | nindent 6 }}
      restartPolicy: OnFailure
      {{- if .Values.initJob.podSecurityContext.enabled }}
      securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.initJob.podSecurityContext "context" $) | nindent 8 }}
      {{- end }}
      initContainers:
        - name: wait-elasticsearch
          image: jwilder/dockerize:0.6.1
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - -ec
            - dockerize -wait http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT} -timeout=120s
          env:
            - name: ELASTICSEARCH_HOST
              value: {{ .Values.externalElasticsearch.host | quote }}
            - name: ELASTICSEARCH_PORT
              value: {{ .Values.externalElasticsearch.port | quote }}
      containers:
        - name: create-index
          image: pelias/schema:master
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              set -o errexit
              set -o nounset
              set -o pipefail

              if [ ! -r "/data/pelias_index.lock" ]; then
                echo "Create elasticsearch index with pelias mapping"
                ./bin/create_index
                touch /data/pelias_index.lock
              fi
              
              echo "Done!"
          volumeMounts:
            - name: pelias-conf
              mountPath: /code/pelias.json
              subPath: pelias.json
            {{- if and $.Values.persistence.enabled }}
            - name: data
              mountPath: /data
            {{- end }}
      volumes:
        - name: pelias-conf
          configMap:
            name: {{ printf "%s-conf" (include "common.names.fullname" .) }}
        - name: data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "common.names.fullname" .) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
{{- end }}